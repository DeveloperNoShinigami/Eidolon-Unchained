buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url "https://maven.neoforged.net/releases" }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
        maven { url 'https://modmaven.dev/' }
        maven {
            name "Sponge"
            url "https://repo.spongepowered.org/repository/maven-public/"
        }
    }
    dependencies {
        //classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.+', changing: true
        classpath group: 'net.neoforged', name: 'NeoGradle', version: '6.0.+', changing: true
        classpath group: 'org.spongepowered', name: 'mixingradle', version: '0.7.+'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
apply plugin: 'net.neoforged.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'maven-publish'

version = mod_version
archivesBaseName = mod_id + "-" + mc_version


if (System.getenv('BUILD_NUMBER') != null) {
    version += "." + System.getenv('BUILD_NUMBER')
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {

    mappings channel: 'parchment', version: '2023.07.02-1.20.1'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')
            arg "-mixin.config=eidolon.mixins.json"

            // Recommended logging data for a userdev environment
            //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                eidolon {
                    source sourceSets.main
                }
            }
        }

        server {
            property 'mixin.env.disableRefMap', 'true'
            workingDirectory project.file('run')
            arg "-mixin.config=eidolon.mixins.json"

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"
            mods {
                eidolon {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'eidolon', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                eidolon {
                    source sourceSets.main
                }
            }
        }
    }

}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dirs 'externalmods'
    }
    mavenCentral()
    maven {
        url = "https://maven.theillusivec4.top/"
    }

    maven {
        url "https://maven.blamejared.com"
    }
    maven {
        url "https://www.cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }


    maven { url 'https://jitpack.io' }

    maven { url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/' }

}

dependencies {

    minecraft "net.neoforged:forge:${mc_version}-${forge_version}"

    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}")
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    // at runtime, use the full JEI
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-common:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

    implementation fg.deobf("top.theillusivec4.curios:curios-forge:${curio_version}")

    ///*implementation*/ runtimeOnly fg.deobf("joefoxe:hexerei:0.3.2.2")

    runtimeOnly fg.deobf("software.bernie.geckolib:geckolib-forge-${mc_version}:${gecko_version}")

    implementation fg.deobf("com.hollingsworth.ars_nouveau:ars_nouveau-${mc_version}:${ars_version}")
    runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${mc_version}-81-FORGE")
    //runtimeOnly fg.deobf("curse.maven:cyanide-541676:3832812") // Cyanide

    runtimeOnly fg.deobf("curse.maven:embeddium-908741:4800420")
    runtimeOnly fg.deobf("curse.maven:modernfix-790626:4792389")

    implementation fg.deobf("curse.maven:placebo-283644:5414631")
    implementation fg.deobf("curse.maven:apothic-attributes-898963:5340012")
    implementation fg.deobf("curse.maven:apotheosis-313970:5486368")

    runtimeOnly fg.deobf("curse.maven:amendments-896746:5200593")
    runtimeOnly fg.deobf("curse.maven:selene-499980:5201144")
    runtimeOnly fg.deobf("curse.maven:spit-it-out-857141:4888754")

    implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-common:0.2.0-beta.8"))
    implementation("com.github.llamalad7.mixinextras:mixinextras-forge:0.2.0-beta.8")

    runtimeOnly fg.deobf("team.lodestar.lodestone:lodestone:1.20.1-1.6.4.252")
    runtimeOnly fg.deobf("com.sammy.malum:malum:1.20.1-1.6.5.242") { transitive = false }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : "eidolon",
                "Specification-Vendor"    : "elucent",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "elucent",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "eidolon.mixins.json"
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')


publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            from components.java
        }
    }
    repositories {
        maven {
            url "file://" + System.getenv("local_maven")
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "eidolon.refmap.json"
}
